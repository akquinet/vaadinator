#*
Copyright 2014 akquinet engineering GmbH
 
Licensed under the Apache License, Version 2.0 (the "License"); you may not
use this file except in compliance with the License. You may obtain a copy of
the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License.
*#
package ${presenterPackage};

import java.util.HashMap;
import java.util.Map;

import ${common.basePackage}.ui.presenter.Presenter;
import ${common.basePackage}.ui.presenter.SubviewCapablePresenter;
import ${viewPackage}.${bean.className}ChangeView;
import ${common.basePackage}.service.${bean.className}Service;

public class ${bean.className}ChangePresenterImpl extends ${bean.className}EditPresenterImpl
		implements ${bean.className}ChangePresenter, ${bean.className}ChangeView.Observer {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private Map<String, Object> context;
	private ${bean.className}ChangeView view;
	
	private Presenter returnPresenter;
	private SubviewCapablePresenter capablePresenter;
	
	private ${bean.className}Service service;
	
	public ${bean.className}ChangePresenterImpl(Map<String, Object> context, ${bean.className}ChangeView view, Presenter returnPresenter, ${bean.className}Service service) {
		this(context, view, returnPresenter, null, service);
	}

	public ${bean.className}ChangePresenterImpl(Map<String, Object> context, ${bean.className}ChangeView view, Presenter returnPresenter, SubviewCapablePresenter capablePresenter, ${bean.className}Service service) {
		super(context, view, returnPresenter);
		this.context = context;
		this.view = view;
		this.returnPresenter = returnPresenter;
		this.capablePresenter = capablePresenter;
		this.service = service;
	}

    @Override
	public ${bean.className}ChangeView getView() {
		return view;
	}

	@Override
	public void startPresenting() {
		view.setObserver(this);
		super.startPresenting();
	}

	@Override
	public void returnToThisPresener(Presenter fromPresenter) {
		loadFromModel();
	}

	@Override
    public void onSave() {
        if (!view.checkAllFieldsValid()) {
            return;
        }
        saveToModel();
        try {
        	this.service.updateExisting${bean.className}(get${bean.className}(), new HashMap<String, Object>(context));
        } catch (RuntimeException exc) {
			view.showErrorMessage(exc.toString());
			throw exc;
		}
		if (capablePresenter != null) {
			capablePresenter.setDetailView(null);
		}
        if (returnPresenter != null) {
            returnPresenter.returnToThisPresener(this);
        }
	}

	@Override
	public void onCancel() {
		// schliesse Fenster und gehe zurueck zur Liste
		if (capablePresenter != null) {
			capablePresenter.setDetailView(null);
		}
		if (returnPresenter != null) {
			returnPresenter.returnToThisPresener(this);
		}
	}

	@Override
	public void onRemove() {
		// TODO hier fehlt noch etwas ;-).
		// this.service.delete${bean.className}();
		if (capablePresenter != null) {
			capablePresenter.setDetailView(null);
		}
		if (returnPresenter != null) {
			returnPresenter.returnToThisPresener(this);
		}
	}

}
