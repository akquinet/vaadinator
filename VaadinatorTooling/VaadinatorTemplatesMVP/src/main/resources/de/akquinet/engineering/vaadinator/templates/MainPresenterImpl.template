#*
Copyright 2014 akquinet engineering GmbH
 
Licensed under the Apache License, Version 2.0 (the "License"); you may not
use this file except in compliance with the License. You may obtain a copy of
the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License.
*#
package ${package};

import ${viewPackage}.MainView;
#foreach($bean in $common.beans)
#if($bean.displayed)
#if($bean.getDisplayProfile($profileName).showOnFirstPage)
import ${viewPackage}.${bean.className}AddView;
import ${viewPackage}.${bean.className}ListView;
#end
#end
#end

import ${common.basePackage}.ui.presenter.Presenter;
import ${common.basePackage}.ui.presenter.SubviewCapablePresenter;
import ${common.basePackage}.ui.view.View;

import java.util.Map;

public class MainPresenterImpl implements MainPresenter {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	private MainView view;
	private PresenterFactory presenterFactory;

	public MainPresenterImpl(Map<String, Object> context, MainView view, PresenterFactory presenterFactory) {
		super();
		this.view = view;
		this.presenterFactory = presenterFactory;	
	}
		
	@Override
	public MainView getView() {
		return view;
	}

	@Override
	public void startPresenting() {
		view.initializeUi();
	#foreach($bean in $common.beans)
	#if($bean.displayed)
		${bean.className}ListPresenter lpres${bean.className} = presenterFactory.create${bean.className}ListPresenter(this, new SubviewCapablePresenter() {
			
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			@Override
			public void setMasterView(View view) {
				MainPresenterImpl.this.view.setMasterView("${bean.className}", view);
			}
			
			@Override
			public void setDetailView(View view) {
				MainPresenterImpl.this.view.setDetailView("${bean.className}", view);
			}
		});
		view.setMasterView("${bean.className}", lpres${bean.className}.getView());
		lpres${bean.className}.startPresenting();
	#end
	#end
	}

	@Override
	public void returnToThisPresener(Presenter fromPresenter) {
		// nichts zu tun
	}

}
