#*
Copyright 2014 akquinet engineering GmbH
 
Licensed under the Apache License, Version 2.0 (the "License"); you may not
use this file except in compliance with the License. You may obtain a copy of
the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License.
*#
package ${package};

import ${common.basePackage}.ui.presenter.Presenter;
import ${common.basePackage}.ui.presenter.SubviewCapablePresenter;
import ${common.basePackage}.ui.presenter.listener.AfterCancelListener;
import ${common.basePackage}.ui.presenter.listener.AfterDeleteListener;
import ${common.basePackage}.ui.presenter.listener.AfterSaveListener;
import ${common.basePackage}.ui.presenter.listener.AfterSelectListener;
import ${common.basePackage}.ui.presenter.listener.BeforeCancelListener;
import ${common.basePackage}.ui.presenter.listener.BeforeDeleteListener;
import ${common.basePackage}.ui.presenter.listener.BeforeSaveListener;
import ${common.basePackage}.ui.presenter.listener.BeforeSelectListener;

import ${viewPackage}.ViewFactory;

#foreach($bean in $common.beans)
#if($bean.displayed || $bean.service)
import ${bean.basePckg}.service.${bean.className}Service;
#end
#end	

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class PresenterFactory {

	protected Map<String, Object> context;
	protected ViewFactory viewFactory;

	protected AfterCancelListener<Object> commonAfterCancelListener = null;
	protected BeforeCancelListener<Object> commonBeforeCancelListener = null;
	protected AfterDeleteListener<Object> commonAfterDeleteListener = null;
	protected BeforeDeleteListener<Object> commonBeforeDeleteListener = null;
	protected AfterSaveListener<Object> commonAfterSaveListener = null;
	protected BeforeSaveListener<Object> commonBeforeSaveListener = null;
	protected AfterSelectListener<Object> commonAfterSelectListener = null;
	protected BeforeSelectListener<Object> commonBeforeSelectListener = null;
	
	/**
	 * Creates an uninitialized PresenterFactory. This should be used for tests
	 * where you only need some services and adding a new DisplayBean shall not
	 * create compiler errors on your tests.
	 */
	protected PresenterFactory() {
		super();
	}
	public PresenterFactory(Map<String, Object> context, ViewFactory viewFactory
#foreach($bean in $common.beans)
#if($bean.displayed || $bean.service)
		, ${bean.className}Service ${bean.classNamePass}Service
#end
#end	
	) {
		super();
		this.context = context;
		this.viewFactory = viewFactory;
#foreach($bean in $common.beans)
#if($bean.displayed)
		this.${bean.classNamePass}Service = ${bean.classNamePass}Service;
#end
#end	
	}

#foreach($bean in $common.beans)
#if($bean.displayed)
	protected ${bean.className}Service ${bean.classNamePass}Service;

#if( $bean.getDisplayProfile($profileName).getExStrings().contains("ADD_PRES") )
	public ${bean.className}AddPresenterEx create${bean.className}AddPresenter(Presenter returnPresenter) {
		${bean.className}AddPresenterEx ${bean.classNamePass}AddPresenter = null;
#else
	public ${bean.className}AddPresenter create${bean.className}AddPresenter(Presenter returnPresenter) {
		${bean.className}AddPresenter ${bean.classNamePass}AddPresenter = null;
#end
#if( $bean.getDisplayProfile($profileName).getExStrings().contains("ADD_PRES_IMPL") )
		${bean.classNamePass}AddPresenter = new ${bean.className}AddPresenterImplEx(context, viewFactory.create${bean.className}AddView(), returnPresenter, ${bean.classNamePass}Service);
#else
		${bean.classNamePass}AddPresenter = new ${bean.className}AddPresenterImpl(context, viewFactory.create${bean.className}AddView(), returnPresenter, ${bean.classNamePass}Service);
#end
		if(commonAfterCancelListener != null) {
		    ${bean.classNamePass}AddPresenter.addAfterCancelListener(commonAfterCancelListener);
		}
		if(commonBeforeCancelListener != null) {
		    ${bean.classNamePass}AddPresenter.addBeforeCancelListener(commonBeforeCancelListener);
		}
		if(commonAfterSaveListener != null) {
		    ${bean.classNamePass}AddPresenter.addAfterSaveListener(commonAfterSaveListener);
		}
		if(commonBeforeSaveListener != null) {
		    ${bean.classNamePass}AddPresenter.addBeforeSaveListener(commonBeforeSaveListener);
		}
        return ${bean.classNamePass}AddPresenter;
	}

#if( $bean.getDisplayProfile($profileName).getExStrings().contains("CHANGE_PRES") )
	public ${bean.className}ChangePresenterEx create${bean.className}ChangePresenter(Presenter returnPresenter) {
	    ${bean.className}ChangePresenterEx ${bean.classNamePass}ChangePresenter = null;
#else
	public ${bean.className}ChangePresenter create${bean.className}ChangePresenter(Presenter returnPresenter) {
	    ${bean.className}ChangePresenter ${bean.classNamePass}ChangePresenter = null;
#end
#if( $bean.getDisplayProfile($profileName).getExStrings().contains("CHANGE_PRES_IMPL") )
		${bean.classNamePass}ChangePresenter = new ${bean.className}ChangePresenterImplEx(context, viewFactory.create${bean.className}ChangeView(), returnPresenter, ${bean.classNamePass}Service);
#else
		${bean.classNamePass}ChangePresenter = new ${bean.className}ChangePresenterImpl(context, viewFactory.create${bean.className}ChangeView(), returnPresenter, ${bean.classNamePass}Service);
#end
		if(commonAfterCancelListener != null) {
		    ${bean.classNamePass}ChangePresenter.addAfterCancelListener(commonAfterCancelListener);
		}
		if(commonBeforeCancelListener != null) {
		    ${bean.classNamePass}ChangePresenter.addBeforeCancelListener(commonBeforeCancelListener);
		}
		if(commonAfterDeleteListener != null) {
		    ${bean.classNamePass}ChangePresenter.addAfterDeleteListener(commonAfterDeleteListener);
		}
		if(commonBeforeDeleteListener != null) {
		    ${bean.classNamePass}ChangePresenter.addBeforeDeleteListener(commonBeforeDeleteListener);
		}
		if(commonAfterSaveListener != null) {
		    ${bean.classNamePass}ChangePresenter.addAfterSaveListener(commonAfterSaveListener);
		}
		if(commonBeforeSaveListener != null) {
		    ${bean.classNamePass}ChangePresenter.addBeforeSaveListener(commonBeforeSaveListener);
		}
        return ${bean.classNamePass}ChangePresenter;
	}

#if( $bean.getDisplayProfile($profileName).getExStrings().contains("LIST_PRES") )
	public ${bean.className}ListPresenter create${bean.className}ListPresenterEx(Presenter returnPresenter, SubviewCapablePresenter subviewCapablePresenter) {
#else
	public ${bean.className}ListPresenter create${bean.className}ListPresenter(Presenter returnPresenter, SubviewCapablePresenter subviewCapablePresenter) {
#end
#if( $bean.getDisplayProfile($profileName).getExStrings().contains("LIST_PRES_IMPL") )
		return new ${bean.className}ListPresenterImplEx(context, viewFactory.create${bean.className}ListView(), this, ${bean.classNamePass}Service, subviewCapablePresenter);
#else
		return new ${bean.className}ListPresenterImpl(context, viewFactory.create${bean.className}ListView(), this, ${bean.classNamePass}Service, subviewCapablePresenter);
#end
	}
	
#if( $bean.getDisplayProfile($profileName).getExStrings().contains("SELECT_PRES") )
	public ${bean.className}SelectPresenter create${bean.className}SelectPresenterEx() {
#else	
	public ${bean.className}SelectPresenter create${bean.className}SelectPresenter() {
#end
#if( $bean.getDisplayProfile($profileName).getExStrings().contains("SELECT_PRES_IMPL") )
		return new ${bean.className}SelectPresenterImplEx(context, viewFactory.create${bean.className}SelectView(), ${bean.classNamePass}Service);
#else
		return new ${bean.className}SelectPresenterImpl(context, viewFactory.create${bean.className}SelectView(), ${bean.classNamePass}Service);
#end		
	}
#end
#end

	public FirstPagePresenter createFirstPagePresenter() {
		return new FirstPagePresenterImpl(context, viewFactory.createFirstPageView(), this);
	}

	public MainPresenter createMainPresenter() {
		return new MainPresenterImpl(context, viewFactory.createMainView(), this);
	}

}
