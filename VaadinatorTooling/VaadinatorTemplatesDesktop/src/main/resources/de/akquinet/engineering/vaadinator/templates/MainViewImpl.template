#*
Copyright 2014 akquinet engineering GmbH
 
Licensed under the Apache License, Version 2.0 (the "License"); you may not
use this file except in compliance with the License. You may obtain a copy of
the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License.
*#
package ${package};

import java.util.HashMap;
import java.util.Map;

import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.TabSheet;

#parse("/de/akquinet/engineering/vaadinator/templates/bundle_includes.template")

import ${common.basePackage}.ui.view.View;

public class MainViewImpl extends CustomComponent implements MainView {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	protected TabSheet tabs = new TabSheet();

	private Map<String, TabContent> tabContents = new HashMap<String, TabContent>();

	public MainViewImpl() {
		super();
	}

	@Override
	public Object getComponent() {
		return this;
	}

#parse("/de/akquinet/engineering/vaadinator/templates/bundle_obtain.template")

	@Override
	public void initializeUi() {
		tabs.addStyleName("styleid-MainViewImpl-tabs");
		tabs.setSizeFull();
		addStyleName("styleid-MainViewImpl");
		setCompositionRoot(tabs);
	}

	protected TabContent obtainTab(String identifier) {
		if (!tabContents.containsKey(identifier)) {
			TabContent tabContent = new TabContent();
			tabContents.put(identifier, tabContent);
			tabs.addTab(tabContent, obtainTabCaption(identifier));
		}
		return tabContents.get(identifier);
	}

	protected String obtainTabCaption(String identifier) {
	#foreach($bean in $common.beans)
	#if($bean.displayed)
		if("${bean.className}".equals(identifier)){
			return obtainBundle().getString("entity.${bean.className}");
		}
	#end
	#end
		return identifier;
	}

	@Override
	public void setMasterView(String identifier, View view) {
		Component newComp = view == null ? new Placeholder() : (Component) view.getComponent();
		obtainTab(identifier).replaceLeftComponent(newComp);
	}

	@Override
	public void setDetailView(String identifier, View view) {
		Component newComp = view == null ? new Placeholder() : (Component) view.getComponent();
		obtainTab(identifier).replaceRightComponent(newComp);
	}

	public class Placeholder extends Label {

		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;

	}

	public class TabContent extends HorizontalLayout {

		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;

		private Component leftComponent = new Placeholder();
		private Component rightComponent = new Placeholder();

		public TabContent() {
			super();
			setSizeFull();
			addComponent(leftComponent);
			addComponent(rightComponent);
		}

		public void replaceLeftComponent(Component withComponent) {
			replaceComponent(leftComponent, withComponent);
			leftComponent = withComponent;
		}

		public void replaceRightComponent(Component withComponent) {
			replaceComponent(rightComponent, withComponent);
			rightComponent = withComponent;
		}

	}
	
}
