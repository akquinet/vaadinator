#*
Copyright 2014 akquinet engineering GmbH
 
Licensed under the Apache License, Version 2.0 (the "License"); you may not
use this file except in compliance with the License. You may obtain a copy of
the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License.
*#
package ${package};

import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.util.Locale;

import com.vaadin.data.Validator.InvalidValueException;
import com.vaadin.shared.ui.datefield.Resolution;
import com.vaadin.ui.AbstractOrderedLayout;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DateField;
import com.vaadin.ui.Field;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Notification.Type;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
#if($bean.beanValidation==true)
import com.vaadin.data.validator.BeanValidator;
#end
import ${common.basePackage}.ui.view.ExceptionMappingStrategy;
#parse("/de/akquinet/engineering/vaadinator/templates/bundle_includes.template")

#foreach($import in $bean.imports)
${import}
#end
import ${modelPackage}.*;

public abstract class ${bean.className}EditViewImpl<O extends ${bean.className}EditView.Observer>
		extends CustomComponent implements ${bean.className}EditView<O> {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private O observer;
	
	protected VerticalLayout mainLayout = new VerticalLayout();
	protected HorizontalLayout buttonLayout = new HorizontalLayout();
	protected FormLayout editLayout = new FormLayout();
	protected ExceptionMappingStrategy exceptionMappingStrategy = null;
#parse("/de/akquinet/engineering/vaadinator/templates/EditViewImpl_controlvar.template")

#parse("/de/akquinet/engineering/vaadinator/templates/bundle_obtain.template")

    public ${bean.className}EditViewImpl(ExceptionMappingStrategy exceptionMappingStrategy) {
    	super();
		this.exceptionMappingStrategy = exceptionMappingStrategy;
	}
	
	@Override
	public void initializeUi() {

		buttonLayout.setSpacing(true);
		initButtons(buttonLayout);

#parse("/de/akquinet/engineering/vaadinator/templates/EditViewImpl_control.template")

		editLayout.setMargin(true);
		editLayout.setSizeFull();
		
#foreach($property in $bean.getDisplayProfile($profileName).propertiesInProfile)
#if($property.getDisplayPropertyProfile($profileName).showInDetail && $property.getDisplayPropertyProfile($profileName).readOnly==false)
		editLayout.addComponent(${property.propertyName});
#end
#end		
		
		mainLayout.addComponent(buttonLayout);
		mainLayout.addComponent(editLayout);
		setCompositionRoot(mainLayout);
		addStyleName("styleid-${bean.className}EditViewImpl");
	}

	protected abstract void initButtons(AbstractOrderedLayout buttonLayout);

	@Override
	public Object getComponent() {
		return this;
	}
	
	@Override
	public void setObserver(O observer) {
		this.observer = observer;
	}

	protected O getObserver() {
		return this.observer;
	}

#parse("/de/akquinet/engineering/vaadinator/templates/EditViewImpl_validation.template")

	@Override
	public void beforeValidation() {
	}

	@Override
	public void beforeFieldValidation(Field<?> field) {
	}

	@Override
	public void onFieldValidationError(Field<?> field, InvalidValueException excpetion) {
	}

	@Override
	public void onValidationError(Map<Field<?>, InvalidValueException> validationErrors) {
	}
	
	@Override
	public void showErrorMessage(String message) {
		Notification.show(message, Type.ERROR_MESSAGE);
	}
	
	@Override
	public void showErrorMessage(Exception exception) {
		Notification.show(exceptionMappingStrategy.getCaption(exception),
				exceptionMappingStrategy.getMessage(exception), exceptionMappingStrategy.getType(exception));

	}

#foreach($property in $bean.getDisplayProfile($profileName).propertiesInProfile)
#if($property.getDisplayPropertyProfile($profileName).showInDetail)
	public ${property.propertyClassName} ${property.propertyGetterName}() {
	#if($property.getDisplayPropertyProfile($profileName).fieldTypeAuswahlAusListe)
		return (${property.propertyClassName}) ${property.propertyName}.getValue();
	#elseif($property.getDisplayPropertyProfile($profileName).fieldTypeMultiAuswahlAusListe)
		return (java.util.Set) ${property.propertyName}.getValue();
	#elseif($property.getDisplayPropertyProfile($profileName).fieldTypeUnboxed)
		return ${property.propertyName}.getValue();
	#elseif($property.converterClassName)
	    return (${property.propertyClassName}) ${property.propertyName}.getConvertedValue();
	#elseif($property.propertyUnboxed)
		return ${property.propertyUnboxedFromString}(${property.propertyName}.getValue());
	#else
		return ${property.propertyName}.getValue();
	#end
	}
	
	public void ${property.propertySetterName}(${property.propertyClassName} ${property.propertyName}) {
	#if($property.getDisplayPropertyProfile($profileName).fieldTypeAuswahlAusListe)
		this.${property.propertyName}.setValue(${property.propertyName});
	#elseif($property.getDisplayPropertyProfile($profileName).fieldTypeUnboxed)
		this.${property.propertyName}.setValue(${property.propertyName});
	#elseif($property.propertyUnboxed)
		this.${property.propertyName}.setValue(${property.propertyUnboxedToString}(${property.propertyName}));
	#elseif($property.converterClassName)
	    this.${property.propertyName}.setConvertedValue(${property.propertyName});
	#else
		this.${property.propertyName}.setValue(${property.propertyName});
	#end
	}
	
	#if($property.getDisplayPropertyProfile($profileName).fieldTypeAuswahlAusListe)
	public void ${property.propertySetChoicesForMethodName}(List<${property.propertyClassName}> ${property.propertyChoicesForParamName}) {
		for (${property.propertyClassName} auswahl : ${property.propertyChoicesForParamName}) {
			${property.propertyName}.addItem(auswahl);
			${property.propertyName}.setItemCaption(auswahl, ${property.propertyObtainMethodName.replace("Auswahl", "Caption")}(auswahl));
		}
	}
	#end
	
	#if($property.getDisplayPropertyProfile($profileName).fieldTypeMultiAuswahlAusListe)
	public void ${property.propertySetChoicesForMethodName}(List<${property.propertyClassTypeParameter}> ${property.propertyChoicesForParamName}) {
		for (${property.propertyClassTypeParameter} auswahl : ${property.propertyChoicesForParamName}) {
			${property.propertyName}.addItem(auswahl);
			${property.propertyName}.setItemCaption(auswahl, ${property.propertyObtainMethodName.replace("Auswahl", "Caption")}(auswahl));
		}
	}
	#end

	#if($property.getDisplayPropertyProfile($profileName).fieldTypeAuswahlAusListe)
	protected String ${property.propertyObtainMethodName.replace("Auswahl", "Caption")}(${property.propertyClassName} auswahl) {
		#if($property.hasEnumClass($common.beans))
		switch(auswahl){
			#foreach($enumVal in $property.getEnumClass($common.beans).enumValues)
			case ${enumVal.value}:
				return obtainBundle().getString("entity.${bean.className}.property.${property.propertyName}.enum.${enumVal.value}");
			#end
			default: 
				return null;
		}		
		#else
		return auswahl.toString().substring(0, 1).toUpperCase() + auswahl.toString().substring(1).toLowerCase();
		#end
	} 
	#end
	
	#if($property.getDisplayPropertyProfile($profileName).fieldTypeMultiAuswahlAusListe)
	protected String ${property.propertyObtainMethodName.replace("Auswahl", "Caption")}(${property.propertyClassTypeParameter} auswahl) {
		#if($property.hasEnumClass($common.beans))
		switch(auswahl){
			#foreach($enumVal in $property.getEnumClass($common.beans).enumValues)
			case ${enumVal.value}:
				return obtainBundle().getString("entity.${bean.className}.property.${property.propertyName}.enum.${enumVal.value}");
			#end
			default: 
				return null;
		}		
		#else
		return auswahl.toString().substring(0, 1).toUpperCase() + auswahl.toString().substring(1).toLowerCase();
		#end
	} 
	#end
#end
#end

}
