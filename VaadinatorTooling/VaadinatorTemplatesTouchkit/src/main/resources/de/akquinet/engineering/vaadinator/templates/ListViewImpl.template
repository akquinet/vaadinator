#*
Copyright 2014 akquinet engineering GmbH
 
Licensed under the Apache License, Version 2.0 (the "License"); you may not
use this file except in compliance with the License. You may obtain a copy of
the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License.
*#
package ${package};

import java.util.ArrayList;
import java.util.List;

#parse("/de/akquinet/engineering/vaadinator/templates/bundle_includes.template")

import ${common.basePackage}.ui.view.View;

#foreach($import in $bean.imports)
${import}
#end
import ${modelPackage}.*;

import ${presenterPackage}.${bean.className}ListPresenter;

import com.vaadin.addon.touchkit.extensions.TouchKitIcon;
import com.vaadin.addon.touchkit.ui.NavigationView;
import com.vaadin.addon.touchkit.ui.Popover;
import com.vaadin.data.Property;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.event.ItemClickEvent;
import com.vaadin.event.ItemClickEvent.ItemClickListener;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Component;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Table;
import com.vaadin.ui.UI;

public class ${bean.className}ListViewImpl extends NavigationView implements ${bean.className}ListView {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	protected Table ${bean.classNamePass}Table = new Table();
	protected Button add${bean.className} = new Button();

	private ${bean.className}ListView.Observer observer;

	public ${bean.className}ListViewImpl() {
		super();
	}

#parse("/de/akquinet/engineering/vaadinator/templates/bundle_obtain.template")

	@Override
	public void initializeUi() {
		setCaption(obtainBundle().getString("entity.${bean.className}.plural"));
		${bean.classNamePass}Table.setSelectable(true);
		${bean.classNamePass}Table.addItemClickListener(new ItemClickListener() {

			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			@Override
			public void itemClick(ItemClickEvent event) {
				${bean.className} sel = (${bean.className}) ${bean.classNamePass}Table.getValue();
				if (sel != null) {
					observer.on${bean.className}Chosen();
				}
			}
		});
		setOrRefreshData(new ArrayList<${bean.className}>());
		${bean.classNamePass}Table.addStyleName("styleid-${bean.className}ListViewImpl-${bean.classNamePass}Table");
		setContent(${bean.classNamePass}Table);
		${bean.classNamePass}Table.setSizeFull();
		add${bean.className}.addClickListener(new ClickListener() {

			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				observer.onAdd${bean.className}();
			}
		});
		TouchKitIcon.plus.addTo(add${bean.className});
		add${bean.className}.addStyleName("styleid-${bean.className}ListViewImpl-add${bean.className}");
		setRightComponent(add${bean.className});
		addStyleName("styleid-${bean.className}ListViewImpl");
	}

	private Popover popover = null;

	@Override
	public void openSubView(View view) {
		popover = new Popover();
		popover.setSizeFull();
		popover.setModal(false);
		popover.setContent((Component) view.getComponent());
		UI.getCurrent().addWindow(popover);
	}

	@Override
	public void closeSubView() {
		if (popover != null) {
			popover.close();
			popover = null;
		}
	}

	@Override
	public void setOrRefreshData(List<${bean.className}> ${bean.classNamePass}List) {
		List<String> visibleCols = new ArrayList<String>();
#foreach($property in $bean.getDisplayProfile($profileName).propertiesInProfile)
#if($property.getDisplayPropertyProfile($profileName).showInTable)
		visibleCols.add("${property.propertyName}");
#end
#end
		${bean.classNamePass}Table.setContainerDataSource(new BeanItemContainer<${bean.className}>(${bean.className}.class, ${bean.classNamePass}List), visibleCols);
#foreach($property in $bean.getDisplayProfile($profileName).propertiesInProfile)
#if($property.getDisplayPropertyProfile($profileName).showInTable)
		${bean.classNamePass}Table.setColumnHeader("${property.propertyName}", obtainBundle().getString("entity.${bean.className}.property.${property.propertyName}"));
#end
#end
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Override
	public Property<${bean.className}> get${bean.className}Selection() {
		return (Property) ${bean.classNamePass}Table;
	}

	@Override
	public void setObserver(${bean.className}ListView.Observer observer) {
		this.observer = observer;
	}

	@Override
	public Object getComponent() {
		return this;
	}

	@Override
	public void showErrorMessage(String message) {
		Notification.show(message, Notification.Type.ERROR_MESSAGE);
	}

}
