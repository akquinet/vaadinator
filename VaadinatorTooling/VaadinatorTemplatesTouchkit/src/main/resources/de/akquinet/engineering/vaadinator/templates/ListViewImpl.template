#*
Copyright 2014 akquinet engineering GmbH
 
Licensed under the Apache License, Version 2.0 (the "License"); you may not
use this file except in compliance with the License. You may obtain a copy of
the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License.
*#
package ${package};

import java.util.ArrayList;
import java.util.List;

#parse("/de/akquinet/engineering/vaadinator/templates/bundle_includes.template")

import ${common.basePackage}.ui.view.View;
import ${common.basePackage}.ui.view.ButtonFactory;
import ${common.basePackage}.ui.view.ExceptionMappingStrategy;

#foreach($import in $bean.imports)
${import}
#end
import ${modelPackage}.*;

import ${presenterPackage}.${bean.className}ListPresenter;

import com.vaadin.data.Item;
import com.vaadin.data.Container;
import com.vaadin.data.Container.Filter;
import com.vaadin.addon.touchkit.ui.NavigationView;
import com.vaadin.addon.touchkit.ui.Popover;
import com.vaadin.data.Property;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.event.ItemClickEvent;
import com.vaadin.event.ItemClickEvent.ItemClickListener;
import com.vaadin.server.FontAwesome;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Component;
import com.vaadin.ui.Notification;
import com.vaadin.ui.UI;

public class ${bean.className}ListViewImpl extends NavigationView implements ${bean.className}ListView {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

    protected Component ${bean.classNamePass}SelectViewComponent;
	protected Button add${bean.className} = null;

    private BeanItemContainer<${bean.className}> container;    

	private ${bean.className}ListView.Observer observer;

	protected ExceptionMappingStrategy exceptionMappingStrategy = null;
    protected ButtonFactory buttonFactory = null;

	public ${bean.className}ListViewImpl(ExceptionMappingStrategy exceptionMappingStrategy, ButtonFactory buttonFactory) {
		super();
		this.exceptionMappingStrategy = exceptionMappingStrategy;
		this.buttonFactory = buttonFactory;
		createButtons();
	}

 	
 	@Override
    public void set${bean.className}SelectView(${bean.className}SelectView ${bean.classNamePass}SelectView) {
		this.${bean.classNamePass}SelectViewComponent = (Component) ${bean.classNamePass}SelectView.getComponent();
    }
    
#parse("/de/akquinet/engineering/vaadinator/templates/bundle_obtain.template")

	@Override
	public void initializeUi() {
		initButtons();
		setCaption(obtainBundle().getString("entity.${bean.className}.plural"));

		setContent(${bean.classNamePass}SelectViewComponent);
		${bean.classNamePass}SelectViewComponent.setSizeFull();

		setRightComponent(add${bean.className});
		addStyleName("styleid-${bean.className}ListViewImpl");
	}

	@Override
	public void createButtons() {
		add${bean.className} = buttonFactory.createNewButton();
	}
	
	@Override
	public void initButtons() {
		buttonFactory.initNewButton(add${bean.className}, obtainBundle().getString("entity.${bean.className}.new"),
				"styleid-${bean.className}ListViewImpl-add${bean.className}", new ClickListener() {
					private static final long serialVersionUID = 1L;

					@Override
					public void buttonClick(ClickEvent event) {
						observer.onAdd${bean.className}();
					}
				});
	}
	
    /*
	 * A custom filter for searching a String value in all visible columns of a table
	 */
	public static class ${bean.className}Filter implements Filter {
	
		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;
		
		private String needle;

		public ${bean.className}Filter(String needle) {
			this.needle = needle.toLowerCase();
		}

		public String getNeedle() {
			return needle;
		}
		
		@Override
		public boolean passesFilter(Object itemId, Item item) {
			String haystack = (""
#foreach($property in $bean.getDisplayProfile($profileName).propertiesInProfile)
#if($property.getDisplayPropertyProfile($profileName).showInTable)
				+ getPropertyVal(item, ${bean.className}Properties.${property.propertyName.toUpperCase()}.getPropertyName()) + "---"
#end
#end
			).toLowerCase();
			return haystack.contains(needle);
		}

		private String getPropertyVal(Item item, String name) {
			Property<?> prop = item.getItemProperty(name);
			if (prop == null) {
				return null;
			}
			return String.valueOf(prop.getValue());
		}

		public boolean appliesToProperty(Object id) {
			return true;
		}
	}
	private Popover popover = null;

	@Override
	public void openSubView(View view) {
		popover = new Popover();
		popover.setSizeFull();
		popover.setModal(false);
		popover.setContent((Component) view.getComponent());
		UI.getCurrent().addWindow(popover);
	}

	@Override
	public void closeSubView() {
		if (popover != null) {
			popover.close();
			popover = null;
		}
	}

	@Override
	public void setObserver(${bean.className}ListView.Observer observer) {
		this.observer = observer;
	}

	@Override
	public Object getComponent() {
		return this;
	}

	@Override
	public void showErrorMessage(String message) {
		Notification.show(message, Notification.Type.ERROR_MESSAGE);
	}
	
	@Override
	public void showErrorMessage(Exception exception) {
		Notification.show(exceptionMappingStrategy.getCaption(exception),
				exceptionMappingStrategy.getMessage(exception), exceptionMappingStrategy.getType(exception));

	}

}
